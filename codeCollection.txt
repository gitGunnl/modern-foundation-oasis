### src/pages/blog/index.tsx
```
import React from 'react';
import Navigation from "@/components/Navigation";
import Footer from "@/components/Footer";
import BlogSearch from "@/components/blog/BlogSearch";
import BlogCategories from "@/components/blog/BlogCategories";
import BlogCard from "@/components/blog/BlogCard";

// Import the JSON “database” of blog posts
import blogPostsData from "@/data/blogPosts.json";

export interface BlogPost {
  id: string;
  title: string;
  excerpt: string;
  date: string;
  readTime: string;
  category: string;
  imageUrl: string;
  content?: string; // content is optional here
}

// Simulate an async fetch (e.g. using a Promise)
const fetchBlogPosts = async (): Promise<BlogPost[]> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(blogPostsData);
    }, 300);
  });
};

const BlogIndex = () => {
  const [searchQuery, setSearchQuery] = React.useState("");
  const [selectedCategory, setSelectedCategory] = React.useState<string | null>(null);
  const [posts, setPosts] = React.useState<BlogPost[]>([]);
  const [isLoading, setIsLoading] = React.useState(true);

  React.useEffect(() => {
    fetchBlogPosts().then((data) => {
      setPosts(data);
      setIsLoading(false);
    });
  }, []);

  const categories = Array.from(new Set(posts.map((post) => post.category)));

  const filteredPosts = posts.filter((post) => {
    const matchesSearch =
      post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      post.excerpt.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = !selectedCategory || post.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-purple-50 via-white to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900">
      <Navigation />

      <main className="flex-grow container mx-auto px-4 py-24 animate-fade-up">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-12 space-y-4">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-indigo-400 text-transparent bg-clip-text">
              Our Blog
            </h1>
            <p className="text-gray-300 max-w-2xl mx-auto">
              Explore our latest insights, tutorials, and updates about digital transformation
              and web development.
            </p>
          </div>

          <div className="glass-card p-6 rounded-xl mb-12">
            <div className="flex flex-col md:flex-row gap-8">
              <BlogSearch searchQuery={searchQuery} setSearchQuery={setSearchQuery} />
              <BlogCategories 
                categories={categories}
                selectedCategory={selectedCategory}
                setSelectedCategory={setSelectedCategory}
              />
            </div>
          </div>

          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {[1, 2, 3].map((n) => (
                <div key={n} className="animate-pulse glass-card p-6 rounded-xl">
                  <div className="bg-gray-200 h-48 rounded-lg mb-4"></div>
                  <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                </div>
              ))}
            </div>
          ) : filteredPosts.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {filteredPosts.map((post, index) => (
                <div
                  key={`post-${post.id}`}
                  className="opacity-0 animate-fade-up"
                  style={{ animationDelay: `${index * 100}ms`, animationFillMode: "forwards" }}
                >
                  <BlogCard post={post} index={index} />
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <p className="text-gray-600">No posts found matching your criteria.</p>
            </div>
          )}
        </div>
      </main>

      <Footer />
    </div>
  );
};

export default BlogIndex;

```

### src/pages/blog/[id].tsx
```
import React from "react";
import { useParams, Link } from "react-router-dom";
import Navigation from "@/components/Navigation";
import Footer from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { Calendar, Clock, ArrowLeft } from "lucide-react";
import blogPostsData from "@/data/blogPosts.json";
import { BlogPost } from "./index";

const fetchBlogPost = async (id: string): Promise<BlogPost | null> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const post = (blogPostsData as BlogPost[]).find((p) => p.id === id) || null;
      resolve(post);
    }, 300);
  });
};

const BlogPostPage = () => {
  const { id } = useParams<{ id: string }>();
  const [post, setPost] = React.useState<BlogPost | null>(null);
  const [isLoading, setIsLoading] = React.useState(true);

  React.useEffect(() => {
    if (id) {
      fetchBlogPost(id).then((data) => {
        setPost(data);
        setIsLoading(false);
      });
    }
  }, [id]);

  if (isLoading) {
    return (
      <div className="min-h-screen flex flex-col bg-gradient-to-br from-purple-50 via-white to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900">
        <Navigation />
        <div className="flex-grow container mx-auto px-4 py-24">
          <div className="animate-pulse max-w-3xl mx-auto">
            <div className="h-8 bg-gray-800 rounded w-3/4 mb-4"></div>
            <div className="h-4 bg-gray-800 rounded w-1/4 mb-8"></div>
            <div className="h-48 bg-gray-800 rounded mb-8"></div>
            <div className="space-y-4">
              <div className="h-4 bg-gray-800 rounded"></div>
              <div className="h-4 bg-gray-800 rounded"></div>
              <div className="h-4 bg-gray-800 rounded w-5/6"></div>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (!post) return null;

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-purple-50 via-white to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900">
      <Navigation />

      <main className="flex-grow container mx-auto px-4 py-24">
        <article className="max-w-3xl mx-auto">
          <Link to="/blog">
            <Button
              variant="ghost"
              className="mb-8 hover-lift text-gray-300 hover:text-white hover:bg-white/10"
            >
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Blog
            </Button>
          </Link>

          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-indigo-400 text-transparent bg-clip-text">
            {post.title}
          </h1>

          <div className="flex items-center gap-4 text-gray-400 mb-8">
            <span className="flex items-center gap-1">
              <Calendar className="h-4 w-4" />
              {new Date(post.date).toLocaleDateString()}
            </span>
            <span className="flex items-center gap-1">
              <Clock className="h-4 w-4" />
              {post.readTime}
            </span>
            <span className="text-purple-400 font-medium">{post.category}</span>
          </div>

          <div className="relative">
            <img
              src={post.imageUrl}
              alt={post.title}
              className="w-full h-64 object-cover rounded-lg mb-8"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-gray-900/20 to-transparent rounded-lg" />
          </div>

          <div
            className="prose prose-lg max-w-none prose-invert prose-headings:text-gray-100 prose-p:text-gray-300 prose-strong:text-purple-400 prose-a:text-purple-400"
            dangerouslySetInnerHTML={{ __html: post.content }}
          />
        </article>
      </main>

      <Footer />
    </div>
  );
};

export default BlogPostPage;

```

### src/data/blogPosts.json
```
[
  {
    "id": "smart-fiskeri-p-f-r-erne-hvordan-ai-kan-sikre-fremtidens-fiskeri",
    "title": "Smart Fiskeri på Færøerne: Hvordan AI Kan Sikre Fremtidens Fiskeri",
    "excerpt": "Smart Fiskeri på Færøerne: Hvordan AI Kan Sikre Fremtidens Fiskeri Når Tradition Møder TeknologiFiskeri er ikke bare en industri på Færøerne – det er...",
    "date": "2025-02-05",
    "readTime": "8 min read",
    "category": "Sustainability",
    "imageUrl": "/placeholder.svg",
    "content": "# Smart Fiskeri på Færøerne: Hvordan AI Kan Sikre Fremtidens Fiskeri\n\n## Når Tradition Møder Teknologi\nFiskeri er ikke bare en industri på Færøerne – det er en livsstil. …\n(rest of your markdown content)"
  }
]
```

### scripts/add-blog.js
```
#!/usr/bin/env node
/**
 * scripts/add-blog.js
 *
 * Reads a blog post from blog-template.txt, extracts front matter (if provided)
 * and content, generates an ID from the title, appends the new blog post to
 * src/data/blogPosts.json, and finally empties blog-template.txt.
 *
 * Expected template format (front matter is optional):
 *
 *   Title: My Amazing Post
 *   Category: Digital Transformation
 *   ReadTime: 7 min read
 *   ImageUrl: /my-image.svg
 *   Excerpt: (optional excerpt, otherwise generated)
 *   ---
 *   # My Amazing Post
 *
 *   (Markdown content …)
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

// Determine __dirname since we're using ES modules.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// A simple slugify function
function slugify(text) {
  return text
    .toString()
    .toLowerCase()
    .trim()
    .replace(/[\s\W-]+/g, "-")
    .replace(/^-+|-+$/g, "");
}

const templateFilePath = path.join(__dirname, "..", "blog-template.txt");
const blogPostsFilePath = path.join(__dirname, "..", "src", "data", "blogPosts.json");

// Read the template file
fs.readFile(templateFilePath, "utf8", (err, data) => {
  if (err) {
    console.error("Error reading template file:", err);
    process.exit(1);
  }

  if (!data.trim()) {
    console.log("Template file is empty. Nothing to add.");
    process.exit(0);
  }

  // Split the file into lines
  const lines = data.split("\n");
  let frontMatter = {};
  let contentStartIndex = 0;

  // If the first line starts with "Title:", we assume there is front matter.
  if (lines[0].startsWith("Title:")) {
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].trim() === "---" || lines[i].trim() === "") {
        contentStartIndex = i + 1;
        break;
      }
      const [key, ...rest] = lines[i].split(":");
      frontMatter[key.trim().toLowerCase()] = rest.join(":").trim();
    }
  }

  // The rest of the file is the content
  const content = lines.slice(contentStartIndex).join("\n").trim();
  if (!content) {
    console.error("No content found in the template file.");
    process.exit(1);
  }

  // Get the title either from front matter or by extracting the first markdown heading (# ...)
  let title = frontMatter.title;
  if (!title) {
    const match = content.match(/^#\s+(.+)/);
    if (match) {
      title = match[1].trim();
    } else {
      console.error("No title found in front matter or content.");
      process.exit(1);
    }
  }

  // Other metadata (with defaults if not provided)
  const category = frontMatter.category || "General";
  const readTime = frontMatter.readtime || "5 min read";
  const imageUrl = frontMatter.imageurl || "/placeholder.svg";
  const excerpt =
    frontMatter.excerpt ||
    content.replace(/[#_*>\n]/g, "").slice(0, 150).trim() + "...";

  // Generate a slug from the title
  const id = slugify(title);

  // Use today's date in YYYY-MM-DD format
  const date = new Date().toISOString().slice(0, 10);

  // Build the new blog post object
  const newBlogPost = {
    id,
    title,
    excerpt,
    date,
    readTime,
    category,
    imageUrl,
    content,
  };

  // Load existing blog posts from the JSON file (or start with an empty array)
  let blogPosts = [];
  if (fs.existsSync(blogPostsFilePath)) {
    try {
      const jsonData = fs.readFileSync(blogPostsFilePath, "utf8");
      blogPosts = JSON.parse(jsonData);
    } catch (e) {
      console.error("Error reading blog posts JSON:", e);
      process.exit(1);
    }
  }

  // Check for duplicate IDs
  if (blogPosts.find((post) => post.id === id)) {
    console.error(`A blog post with id "${id}" already exists.`);
    process.exit(1);
  }

  // Append the new blog post and write back to the JSON file
  blogPosts.push(newBlogPost);
  fs.writeFile(
    blogPostsFilePath,
    JSON.stringify(blogPosts, null, 2),
    "utf8",
    (err) => {
      if (err) {
        console.error("Error writing blog posts JSON:", err);
        process.exit(1);
      }
      console.log(`Blog post "${title}" added successfully!`);

      // Empty the template file
      fs.writeFile(templateFilePath, "", "utf8", (err) => {
        if (err) {
          console.error("Error emptying template file:", err);
          process.exit(1);
        }
        console.log("Template file emptied.");
      });
    }
  );
});

```

### blog-template.txt
```

```

